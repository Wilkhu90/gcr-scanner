package io.jenkins.plugins.gcr_scanner;

import com.google.api.gax.core.FixedCredentialsProvider;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.devtools.containeranalysis.v1.ContainerAnalysisClient;
import com.google.cloud.devtools.containeranalysis.v1.ContainerAnalysisSettings;
import hudson.Launcher;
import hudson.model.TaskListener;
import io.grafeas.v1.GrafeasClient;
import io.grafeas.v1.Occurrence;
import io.grafeas.v1.ProjectName;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;

public class GcrVulnerabilityScanner {

    public ArrayList<Occurrence> run(String resourceUrl, String projectId, TaskListener taskListener, Launcher launcher) {
        try {
            GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            ByteArrayOutputStream err = new ByteArrayOutputStream();
            int status = launcher.launch()
                    .cmdAsSingleString("export GOOGLE_SERVICE_ACCOUNT_TOKEN=$(gcloud auth application-default print-access-token)")
                    .stdout(out)
                    .stderr(err).join();
            taskListener.getLogger().println("The status of gcloud statement is " + status);
            taskListener.getLogger().println("Stdout = " + out);
            taskListener.getLogger().println("Stderr = " + err);
            taskListener.getLogger().println("Token fetched = " + System.getenv("GOOGLE_SERVICE_ACCOUNT_TOKEN"));
            taskListener.getLogger().println("Token fetched = " + System.getProperty("GOOGLE_SERVICE_ACCOUNT_TOKEN"));
            HeaderProvider apiClientHeaderProvider = ApiClientHeaderProvider
                    .newBuilder()
                    .setResourceHeaderKey("Authorization")
                    .setResourceToken("Bearer "+System.getenv("GOOGLE_SERVICE_ACCOUNT_TOKEN"))
                    .build();
            ContainerAnalysisSettings containerAnalysisSettings = ContainerAnalysisSettings.newBuilder()
                    .setCredentialsProvider(FixedCredentialsProvider.create(credentials))
                    .setHeaderProvider(apiClientHeaderProvider)
                    .build();
            taskListener.getLogger().println("Creating GrafeasClient now...");
            GrafeasClient client = ContainerAnalysisClient
                    .create(containerAnalysisSettings)
                    .getGrafeasClient();
            taskListener.getLogger().println("Created GrafeasClient...");

            final String projectName = ProjectName.format(projectId);
            String filterStr = String.format("kind=\"VULNERABILITY\" AND resourceUrl=\"%s\"", resourceUrl);

            ArrayList<Occurrence> vulnerabilitylist = new ArrayList<Occurrence>();
            taskListener.getLogger().println("Creating request for list occurrences...");
            GrafeasClient.ListOccurrencesPagedResponse response = client.listOccurrences(projectName, filterStr);
            taskListener.getLogger().println("List occurrences API call responded...");
            for (Occurrence o : response.iterateAll()) {
                vulnerabilitylist.add(o);
            }
            return vulnerabilitylist;
        } catch (Exception ex) {
            taskListener.error(ex.getLocalizedMessage());
        }
        taskListener.getLogger().println("Something went wrong...");
        return new ArrayList<>();
    }
}
