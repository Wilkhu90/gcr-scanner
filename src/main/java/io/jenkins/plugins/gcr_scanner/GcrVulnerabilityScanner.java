package io.jenkins.plugins.gcr_scanner;

import com.google.api.gax.core.FixedCredentialsProvider;
import com.google.api.gax.rpc.FixedHeaderProvider;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.devtools.containeranalysis.v1.ContainerAnalysisClient;
import com.google.cloud.devtools.containeranalysis.v1.ContainerAnalysisSettings;
import io.grafeas.v1.GrafeasClient;
import io.grafeas.v1.Occurrence;
import io.grafeas.v1.ProjectName;
import java.util.ArrayList;
import java.util.HashMap;

public class GcrVulnerabilityScanner {

    public ArrayList<Occurrence> run(String resourceUrl, String projectId) {
        try {
            GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();
            HashMap<String, String> headers = new HashMap<String, String>();
            headers.put("Authorization", "Bearer "+ System.getenv("GOOGLE_SERVICE_ACCOUNT_TOKEN"));
            ContainerAnalysisSettings containerAnalysisSettings = ContainerAnalysisSettings.newBuilder()
                    .setCredentialsProvider(FixedCredentialsProvider.create(credentials))
                    .setHeaderProvider(FixedHeaderProvider.create(headers))
                    .build();
            GrafeasClient client = ContainerAnalysisClient
                    .create(containerAnalysisSettings)
                    .getGrafeasClient();

            final String projectName = ProjectName.format(projectId);
            String filterStr = String.format("kind=\"VULNERABILITY\" AND resourceUrl=\"%s\"", resourceUrl);

            ArrayList<Occurrence> vulnerabilitylist = new ArrayList<Occurrence>();
            GrafeasClient.ListOccurrencesPagedResponse response = client.listOccurrences(projectName, filterStr);
            for (Occurrence o : response.iterateAll()) {
                vulnerabilitylist.add(o);
            }
            return vulnerabilitylist;
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return new ArrayList<>();
    }
}
