package io.jenkins.plugins.gcr_scanner;

import hudson.Extension;
import hudson.FilePath;
import hudson.Launcher;
import hudson.model.AbstractProject;
import hudson.model.Run;
import hudson.model.TaskListener;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;
import hudson.util.FormValidation;
import io.grafeas.v1.Occurrence;
import jenkins.tasks.SimpleBuildStep;
import org.jenkinsci.Symbol;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;
import javax.annotation.Nonnull;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.ArrayList;

public class GcrVulnerabilityBuilder extends Builder implements SimpleBuildStep {

    private String imageName;

    @DataBoundConstructor
    public GcrVulnerabilityBuilder(String imageName) {
        this.imageName = imageName;
    }

    public String getImageName() {
        return imageName;
    }

    @DataBoundSetter
    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    @Override
    public void perform(@Nonnull Run<?, ?> run, @Nonnull FilePath filePath, @Nonnull Launcher launcher, @Nonnull TaskListener taskListener) throws InterruptedException, IOException {
        taskListener.getLogger().printf("GCR Image Scanning for %s in progress...\n", imageName);
        String[] imageTokens = imageName.split("/");
        if(imageTokens.length >= 3 && imageTokens[0].contains("gcr.io")) {
            String projectName = imageTokens[1];
            String resourceUrl = "https://"+imageName;
            taskListener.getLogger().println("ProjectName is " + projectName);
            taskListener.getLogger().println("ResourceUrl is " + resourceUrl);
            GcrVulnerabilityScanner scanner = new GcrVulnerabilityScanner();
            ArrayList<Occurrence> scanOutput = scanner.run(resourceUrl, projectName, taskListener, launcher);
            taskListener.getLogger().println("The total vulnerabilities are " + scanOutput.size());
        } else {
            taskListener.error("The GCR image is invalid. Please specify gcr image only.");
        }
    }

    @Symbol("gcrImageVulnerabilityScanner")
    @Extension
    public static final class DescriptorImpl extends BuildStepDescriptor<Builder> {

        public FormValidation doCheckImageName(@QueryParameter String value) throws IOException, ServletException {
            if(value.split("/")[0].contains("gcr.io")) {
                return FormValidation.ok();
            } else {
                return FormValidation.error("Please specify gcr image only.");
            }
        }

        @Override
        public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            return true;
        }

        @Override
        public String getDisplayName() {
            return "GCR Image Vulnerability Scanner";
        }

    }
}
