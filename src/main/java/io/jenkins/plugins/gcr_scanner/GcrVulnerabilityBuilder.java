package io.jenkins.plugins.gcr_scanner;

import com.google.gson.Gson;
import dnl.utils.text.table.TextTable;
import hudson.*;
import hudson.model.*;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Builder;
import hudson.util.FormValidation;
import io.grafeas.v1.Occurrence;
import io.grafeas.v1.Severity;
import io.grafeas.v1.VulnerabilityOccurrence;
import jenkins.tasks.SimpleBuildStep;
import org.jenkinsci.Symbol;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;
import javax.annotation.Nonnull;
import javax.servlet.ServletException;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class GcrVulnerabilityBuilder extends Builder implements SimpleBuildStep {

    private String imageName;

    @DataBoundConstructor
    public GcrVulnerabilityBuilder(String imageName) {
        this.imageName = imageName;
    }

    public String getImageName() {
        return imageName;
    }

    @DataBoundSetter
    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    @Override
    public void perform(@Nonnull Run<?, ?> run, @Nonnull FilePath filePath, @Nonnull Launcher launcher, @Nonnull TaskListener taskListener) throws InterruptedException, IOException {
        taskListener.getLogger().printf("GCR Image Scanning for %s in progress...\n", imageName);
        String[] imageTokens = imageName.split("/");
        if(imageTokens.length >= 3 && imageTokens[0].contains("gcr.io")) {
            String projectName = imageTokens[1];
            String resourceUrl = "https://"+imageName;
            taskListener.getLogger().println("ProjectName is " + projectName);
            taskListener.getLogger().println("ResourceUrl is " + resourceUrl);
            GcrVulnerabilityScanner scanner = new GcrVulnerabilityScanner();
            ArrayList<Occurrence> scanOutput = scanner.run(resourceUrl, projectName, taskListener, launcher);
            if(scanOutput.size() > 0) {
                taskListener.getLogger().println("The total vulnerabilities are " + scanOutput.size());
                generateTable(scanOutput, taskListener);


                boolean status = filePath.installIfNecessaryFrom(new URL("https://openpolicyagent.org/downloads/latest/opa_linux_amd64"), taskListener, "The file getting downloaded");
                taskListener.getLogger().println("The status of curl statement is " + status);
                List<FilePath> dir = filePath.list();
                for(FilePath f : dir) {
                    taskListener.getLogger().println(f.getName());
                }
                runOpaEvaluation(scanOutput, taskListener, launcher);
            }
        } else {
            taskListener.error("The GCR image is invalid. Please specify gcr image only.");
        }
    }

    public void runOpaEvaluation(ArrayList<Occurrence> scanOutput, TaskListener taskListener, Launcher launcher) {
        Gson gson = new Gson();
        ArrayList<ScanOutput> scanOutputArrayList = new ArrayList<>();
        for(int i=0; i<scanOutput.size(); i++) {
            Occurrence currentOccurrence = scanOutput.get(i);
            List<VulnerabilityOccurrence.PackageIssue> packageIssueList = currentOccurrence.getVulnerability().getPackageIssueList();
            StringBuffer packages = new StringBuffer();
            StringBuffer versions = new StringBuffer();
            StringBuffer statuses = new StringBuffer();
            String[] noteTokens = currentOccurrence.getNoteName().split("/");
            for(VulnerabilityOccurrence.PackageIssue issue : packageIssueList) {
                packages.append(issue.getAffectedPackage());
                versions.append(issue.getAffectedVersion().getFullName());
                if(issue.getFixAvailable()) {
                    statuses.append("Fixed in ");
                    statuses.append(issue.getFixedVersion().getFullName());
                } else {
                    statuses.append("No Fix available");
                }
                ScanOutput currentInput = new ScanOutput(
                        noteTokens[noteTokens.length - 1],
                        packages.toString(),
                        versions.toString(),
                        Severity.forNumber(currentOccurrence.getVulnerability().getSeverity().getNumber()).toString(),
                        statuses.toString());
                scanOutputArrayList.add(currentInput);
            }
        }
        String jsonInput = gson.toJson(scanOutputArrayList);
    }

    public void generateTable(ArrayList<Occurrence> scanOutput, TaskListener taskListener) {
        String[] columnNames = {
                "CVE",
                "Package",
                "Version",
                "Severity",
                "Status"
        };
        Object[][] dataTable = new Object[scanOutput.size()][columnNames.length];
        for(int i=0; i<scanOutput.size(); i++) {
            Occurrence currentOccurrence = scanOutput.get(i);
            List<VulnerabilityOccurrence.PackageIssue> packageIssueList = currentOccurrence.getVulnerability().getPackageIssueList();
            StringBuffer packages = new StringBuffer();
            StringBuffer versions = new StringBuffer();
            StringBuffer statuses = new StringBuffer();
            String[] noteTokens = currentOccurrence.getNoteName().split("/");
            for(VulnerabilityOccurrence.PackageIssue issue : packageIssueList) {
                packages.append(issue.getAffectedPackage());
                versions.append(issue.getAffectedVersion().getFullName());
                if(issue.getFixAvailable()) {
                    statuses.append("Fixed in ");
                    statuses.append(issue.getFixedVersion().getFullName());
                } else {
                    statuses.append("No Fix available");
                }
                dataTable[i] = new Object[] {
                        noteTokens[noteTokens.length - 1],
                        packages.toString(),
                        versions.toString(),
                        Severity.forNumber(currentOccurrence.getVulnerability().getSeverity().getNumber()),
                        statuses.toString()
                };
            }
        }
        TextTable textTable = new TextTable(columnNames, dataTable);
        textTable.setAddRowNumbering(true);
        textTable.printTable(taskListener.getLogger(), 0);
    }

    @Symbol("gcrImageVulnerabilityScanner")
    @Extension
    public static final class DescriptorImpl extends BuildStepDescriptor<Builder> {

        public FormValidation doCheckImageName(@QueryParameter String value) throws IOException, ServletException {
            if(value.split("/")[0].contains("gcr.io")) {
                return FormValidation.ok();
            } else {
                return FormValidation.error("Please specify gcr image only.");
            }
        }

        @Override
        public boolean isApplicable(Class<? extends AbstractProject> aClass) {
            return true;
        }

        @Override
        public String getDisplayName() {
            return "GCR Image Vulnerability Scanner";
        }

    }
}
